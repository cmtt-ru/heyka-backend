'use strict';

const Schmervice = require('schmervice');
const uuid4 = require('uuid/v4');
const rp = require('request-promise');

/**
 * Creates session with Janus instance
 * @param {string} url Janus server URL
 */
const createSession = (url) => {
  const transaction = uuid4();
  return rp({
    method: 'POST',
    url,
    json: true,
    body: {
      transaction,
      janus: 'create'
    }
  })
};

/**
 * Creates room in audiobridge plugin
 * @param {object} config Create room config
 */
const createAudioBridgeRoom = async ({ sessionId, channelId, url, permanent, pluginHandle }) => {
  const transaction = uuid4();
  const response = await rp({
    method: 'POST',
    url: `${url}/${sessionId}/${pluginHandle}`,
    json: true,
    body: {
      janus: 'message',
      transaction,
      body: {
        admin_key: 'superse2cret',
        request: 'create',
        description: channelId,
        permanent,
        is_private: false,
        sampling_rate: 32000
      }
    }
  });
  if (response.janus !== 'success') {
    throw new Error(
      `Error at create audiobridge room (${response.error.code}): `
      + response.error.reason
    )
  }
  return response.plugindata.data;
};

/**
 * Creates room in videoroom plugin
 * @param {object} config Create room config
 */
const createVideoRoom = async ({ sessionId, channelId, url, permanent, pluginHandle }) => {
  const transaction = uuid4();
  const response = await rp({
    method: 'POST',
    url: `${url}/${sessionId}/${pluginHandle}`,
    json: true,
    body: {
      janus: 'message',
      transaction,
      body: {
        request: 'create',
        permanent,
        description: channelId,
        is_private: false
      }
    }
  });
  if (response.janus !== 'success') {
    throw new Error(
      `Error at create videoroom room (${response.error.code}): `
      + response.error.reason
    )
  }
  return response.plugindata.data;
};

/**
 * Creates plugin handle
 * @param {object} config Create handle config
 */
const attachToPlugin = ({ plugin, sessionId, url }) => {
  const transaction = uuid4();
  return rp({
    method: 'POST',
    url: `${url}/${sessionId}`,
    json: true,
    body: {
      janus: 'attach',
      plugin,
      transaction
    }
  });
};

module.exports = class JanusWorkspaceService extends Schmervice.Service {

  constructor (...args) {
    super(...args);
  }

  /**
   * Send request for creating janus server and returns id and url of it
   * @returns {object} Object with an external id and url of the created Janus server
   */
  async createServer () {
    return {
      id: uuid4(),
      url: 'http://172.17.0.4',
      api_port: 8088,
      api_path: 'janus',
      admin_secret: 'wowwhattheheck'
    };
  }

  /**
   * Creates rooms in janus.plugin.audiobridge and janus.plugin.videoroom
   * @param {uuid} id Backend channel id
   * @param {object} janusServerInfo Janus server info (url, admin secrets etc.)
   * @returns {object} { audioRoomId, videoRoomId } - generated by Janus ids
   */
  async createAudioVideoRooms (id, janusServerInfo) {
    const url = janusServerInfo.url
      + `:${janusServerInfo.api_port}`
      + `/${janusServerInfo.api_path}`;

    // create Janus session
    const session = await createSession(url);

    // create plugin handles for AudioBridge & VideoRoom
    const audioBridgePluginHandle = await attachToPlugin({
      plugin: 'janus.plugin.audiobridge',
      url,
      sessionId: session.data.id
    });
    const videoRoomPluginHandle = await attachToPlugin({
      plugin: 'janus.plugin.videoroom',
      url,
      sessionId: session.data.id
    });

    // Create rooms in the both plugins
    const result_ab = await createAudioBridgeRoom({
      sessionId: session.data.id,
      pluginHandle: audioBridgePluginHandle.data.id,
      channelId: id,
      url,
      permanent: false
    });
    const result_vr = await createVideoRoom({
      sessionId: session.data.id,
      pluginHandle: videoRoomPluginHandle.data.id,
      channelId: id,
      url,
      permanent: false
    });

    // Check either are these requests succeed
    if (result_ab.audiobridge !== 'created') {
      console.log(result_ab);
      throw new Error(
        `Creating AudioBridge room error (${result_ab.error_code}): `
        + result_ab.error
        + JSON.stringify(result_ab)
      );
    } 
    if (result_vr.videoroom !== 'created') {
      console.log(result_vr);
      throw new Error(
        `Creating VideoRoom room error (${result_vr.error_code}): `
        + result_vr.error
        + JSON.stringify(result_vr)
      );
    }

    // Return generated by Janus id for AudioBridge and VideoRoom
    return {
      audioRoomId: result_ab.room,
      videoRoomId: result_vr.room
    };
  }
};
